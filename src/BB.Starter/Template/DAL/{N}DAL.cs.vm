using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using BB.Framework.Commons.Database;
using BB.Framework.Commons.Others;
using BB.Framework.DAL.Base;
using BB.Framework.Entity.${NameSpace};
using BB.Framework.IDAL.${NameSpace};

namespace BB.Framework.DAL.${NameSpace};

/// <summary>
#if(${Display})
/// ${Display} 数据访问类
#else
/// ${Name} 数据访问类
#end
/// </summary>
public class ${Name}DAL : BaseDALSQL<${Name}>, I${Name}DAL
{
    #region 对象实例及构造函数

    // public static ${Name} Instance => new();

    public ${Name}DAL() : base(${Name}.DBTableName, ${Name}.PrimaryKey)
    {
        SortField = ${Name}.FieldCreationDate;
        IsDescending = true;
    }

    #endregion

	#region 实体解析函数

    /// <summary>
    /// 将DataReader的属性值转化为实体类的属性值，返回实体类
    /// </summary>
    /// <param name="dataReader">有效的DataReader对象</param>
    /// <returns>实体类对象</returns>
    protected override ${Name} DataReaderToEntity(IDataReader dataReader)
    {
        var reader = new SmartDataReader(dataReader);
        var info = new ${Name}
        {
#foreach($ColumnInfo in ${MetadataImports})
#set($null = "")
#if($ColumnInfo.CSharpFieldType.indexOf("?")!=-1)
#set($null = "Nullable")
#end
            ${ColumnInfo.CSharpFieldName} = reader.Get${ColumnInfo.CSharpFieldFullType}${null}(${Name}.Field${ColumnInfo.CSharpFieldName}),
#end
        };

        return info;
    }

    /// <summary>
    /// 将实体对象的属性值转化为Hashtable对应的键值
    /// </summary>
    /// <param name="obj">有效的实体对象</param>
    /// <returns>包含键值映射的Hashtable</returns>
    protected override Hashtable GetHashByEntity(${Name} obj)
    {
        var hash = new Hashtable
        {
#foreach($ColumnInfo in ${MetadataImports})
#if(!$ColumnInfo.IsIdentity)
            { ${Name}.Field${ColumnInfo.CSharpFieldName}, obj.${ColumnInfo.CSharpFieldName} },
#end
#end
        };

        return hash;
    }

	#endregion
##
##     /// <summary>
##     /// 获取列字段中文别名（用于界面显示）的字典集合
##     /// </summary>
##     /// <returns></returns>
##     public override Dictionary<string, string> GetColumnNameAlias()
##     {
##         return Cache.Instance.Get("${Name}ColumnNameAlias", () =>
##         {
##             Dictionary<string, string> dict = new();

##             #region 添加别名解析

## #foreach($ColumnInfo in ${MetadataImports})
## #if($ColumnInfo.IsColumn)
##             dict.Add(${Name}.Field${ColumnInfo.CSharpFieldName}, "${ColumnInfo.CSharpFieldDes}");
## #end
## #end

##             #endregion

##             return dict;
##         }, new TimeSpan(6, 0, 0));
##     }
}