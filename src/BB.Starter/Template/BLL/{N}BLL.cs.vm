using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data.Common;
using System.Reflection;
using BB.Framework.BLL.Base;
using BB.Framework.BLL.Security;
using BB.Framework.Commons.Database;
#if(${ChildName} && ${ChildName} != "")
using BB.Framework.Commons.Entity;
#end
using BB.Framework.Commons.Extension;
using BB.Framework.Commons.Format;
#if(${ChildName} && ${ChildName} != "")
using BB.Framework.Commons.Others;
#end
using BB.Framework.Entity.Base;
using BB.Framework.Entity.${NameSpace};
using BB.Framework.IBLL.${NameSpace};
using BB.Framework.IDAL.${NameSpace};

namespace BB.Framework.BLL.${NameSpace};

/// <summary>
#if(${Display})
/// ${Display} 业务逻辑类
#else
/// ${Name} 业务逻辑类
#end
/// </summary>
#if(${ChildName} && ${ChildName} != "")
public class ${Name}BLL : BaseT1BLL<${Name}, ${ChildName}, ${ChildName}BLL>, I${Name}BLL
#else
public class ${Name}BLL : BaseBLL<${Name}>, I${Name}BLL
#end
{
    private readonly I${Name}DAL _dal;

    public ${Name}BLL()
    {
        Init(GetType().FullName, Assembly.GetExecutingAssembly().GetName().Name);
        CheckDAL();
        BaseDAL.OnOperationLog += OperationLogBLL.OnOperationLog;
        _dal = BaseDAL as I${Name}DAL;
    }

    /// <summary>
    /// 初始化实体并附加默认值
    /// </summary>
    /// <returns></returns>
    public override ${Name} NewEntity()
    {
        ${Name} entity = base.NewEntity();
#foreach($EntityField in $MetadataImports)
#if(${EntityField.Defaults} && ${EntityField.Defaults} != "")
        entity.${EntityField.CSharpFieldName} = ${EntityField.Defaults};
#end
#end
        return entity;
    }

    /// <summary>
    /// 验证实体或键值对
    /// </summary>
    /// <param name="operationType">操作类型</param>
    /// <param name="obj">实体或键值对</param>
    /// <param name="primaryKeyValue">主键</param>
    /// <returns></returns>
    public override void CheckEntity(OperationType operationType, object obj, object primaryKeyValue = null)
    {
        // 暂时取消对 Hashtable 的支持
        base.CheckEntity(operationType, obj, primaryKeyValue);

        var validator = new ${Name}Validator(operationType);

        validator.ValidateAndThrow((${Name})obj);
##         if (obj is not (${Name} or Hashtable)) return;
##
##         #region 实体通用验证
##
## #foreach($FieldInfo in ${MetadataImports})
## ## 参数值合法性验证
## #set($checkNull = "")
## #set($checkLong = "")
## ## ↓准备长度或空值
## ## ↓如果查长度
## #if($FieldInfo.IsCheckLong)
## #set($checkLong = ", ${FieldInfo.CSharpFieldLong}")
## #end
## ## ↓如果查空
## #if($FieldInfo.IsCheckNull)
## #set($checkNull = ", true")
## #end
## ## ↓如果不查空只查长度
## #if(!$FieldInfo.IsCheckNull && $FieldInfo.IsCheckLong)
## #set($checkNull = ", false")
## #end
## ## ↑end 准备长度或空值
## ## ↓是否有验证规则
## #if(${FieldInfo.Validation} && ${FieldInfo.Validation} != "")
##         CheckEntityValue(ValidateType.${FieldInfo.Validation}, obj, ${Name}.Field${FieldInfo.CSharpFieldName}${checkNull}${checkLong});
## #else
## ## ↓没有验证规则
## ## ↓但有 查空或查长度
## #if($checkLong != "" || $checkNull != "")
##         CheckEntityValue(ValidateType.Null, obj, ${Name}.Field${FieldInfo.CSharpFieldName}${checkNull}${checkLong});
## #end
## ## ↑end 查空或查长度
## #end
## ## ↑end 是否有验证规则
## #end
##
##         #endregion
##
## #######################
##         #region 参数值唯一性验证
##
## #foreach($FieldInfo in ${MetadataImports})
## ## ↓查重
## #if($FieldInfo.IsCheckDuplicate)
##         if (operationType is OperationType.Add)
##             CheckUnique(${Name}.Field${FieldInfo.CSharpFieldName}, "${FieldInfo.CSharpFieldDes}", obj);
## ## ↓查重，不是主键
## #if(!$FieldInfo.IsKey)
##         if (operationType is OperationType.Edit)
##             CheckUnique(${Name}.Field${FieldInfo.CSharpFieldName}, "${FieldInfo.CSharpFieldDes}", obj, ${Name}.PrimaryKey, primaryKeyValue);
## #end
## ## ↑end 查重，不是主键
## #end
## ## ↑end 查重
## #end
##
##         #endregion
    }

    /// <summary>
    /// 获取字段显示权限，0可读写 1只读 2隐藏值 3不显示
    /// </summary>
    /// <param name="isNew">是否新增</param>
    /// <returns></returns>
    public override Dictionary<string, int> GetPermitDict(bool isNew)
    {
        var permitDict = new Dictionary<string, int>
        {
#foreach($ColumnInfo in ${MetadataImports})
#if(!$ColumnInfo.IsVisible || (!$ColumnInfo.IsAdd && !$ColumnInfo.IsEdit))
            { ${Name}.Field${ColumnInfo.CSharpFieldName}, 3 },
#elseif($ColumnInfo.IsReadonly)
            { ${Name}.Field${ColumnInfo.CSharpFieldName}, 1 },
#elseif($ColumnInfo.IsAdd && (!$ColumnInfo.IsEdit || $ColumnInfo.IsKey))
#if($ColumnInfo.IsKey)
            // 主键不为空则只读
#end
            { ${Name}.Field${ColumnInfo.CSharpFieldName}, isNew ? 0 : 1 },
## #elseif($ColumnInfo.IsAdd && $ColumnInfo.IsEdit)
##             { ${Name}.Field${ColumnInfo.CSharpFieldName}, 0 },
#end
#end
        };
        // 后端权限控制
        // var permitDict = BllFactory<FieldPermit>.Instance.GetColumnsPermit(typeof(Test1Car).FullName, LoginUserInfo.ID.ToInt32());
        return permitDict;
    }
#if(${ChildName} && ${ChildName} != "")

    /// <summary>
    /// 主从新增
    /// </summary>
    /// <param name="obj">指定的对象</param>
    /// <param name="childObj">指定对象的子对象</param>
    /// <param name="trans">事务对象</param>
    /// <returns>执行操作是否成功。</returns>
    public override bool Insert(${Name} obj, List<${ChildName}> childObj, DbTransaction trans = null)
    {
#if($IsChildListNull)
        // if (!childObj.Any()) throw new Exception("子表数据不可为空");
#else
        if (!childObj.Any()) throw new Exception("子表数据不可为空");
#end
        return _dal.UseTransaction(() =>
        {
            base.Insert(obj, childObj, trans);
        }, e =>
        {
            LogHelper.Error(e.Message, e);
            throw e;
        });
    }

    /// <summary>
    /// 主从修改
    /// </summary>
    /// <param name="obj">指定的对象</param>
    /// <param name="childObj">指定对象的子对象编辑列表</param>
    /// <param name="optimisticLock">乐观锁验证</param>
    /// <param name="trans">事务对象</param>
    /// <returns>执行操作是否成功。</returns>
    public override bool Update(${Name} obj, EditedList<${ChildName}> childObj, bool optimisticLock = true, DbTransaction trans = null)
    {
        return _dal.UseTransaction(() =>
        {
            base.Update(obj, childObj, optimisticLock, trans);
        }, e =>
        {
            LogHelper.Error(e.Message, e);
            throw e;
        });
    }

    /// <summary>
    /// 级联删除主表和关联子表数据
    /// </summary>
    /// <param name="key">指定对象的ID</param>
    /// <param name="trans">事务对象</param>
    /// <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
    public override bool CascadeDelete(object key, DbTransaction trans = null)
    {
        return _dal.UseTransaction(() =>
        {
            base.CascadeDelete(key, trans);
        }, e =>
        {
            LogHelper.Error(e.Message, e);
            throw e;
        });
    }
#end

    /// <summary>
    /// 新增一条数据
    /// </summary>
    /// <param name="obj">指定的对象</param>
    /// <param name="trans">事务对象</param>
    /// <returns>执行操作是否成功。</returns>
    public override bool Insert(${Name} obj, DbTransaction trans = null)
    {
        #region 新增前

        #endregion

        bool succeed = base.Insert(obj, trans);

        #region 新增后

        if (!succeed) return false;

        //可添加其他关联操作

        return true;

        #endregion
    }

    /// <summary>
    /// 更新一条数据
    /// </summary>
    /// <param name="obj">指定的对象</param>
    /// <param name="optimisticLock">乐观锁验证</param>
    /// <param name="trans">事务对象</param>
    /// <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
    public override bool Update(${Name} obj, bool optimisticLock = true, DbTransaction trans = null)
    {
        #region 修改前

        #endregion

        bool succeed = base.Update(obj, optimisticLock, trans);

        #region 修改后

        if (!succeed) return false;

        //可添加其他关联操作

        return true;

        #endregion
    }

    /// <summary>
    /// 删除一条数据
    /// </summary>
    /// <param name="key">指定对象的ID</param>
    /// <param name="trans">事务对象</param>
    /// <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
    public override bool Delete(object key, DbTransaction trans = null)
    {
        #region 删除前

        #endregion

        bool succeed = base.Delete(key, trans);

        #region 删除后

        if (!succeed) return false;

        //可添加其他关联操作

        return true;

        #endregion
    }

    /// <summary>
    /// 审批一条数据
    /// </summary>
    /// <param name="key">主键</param>
    /// <param name="optimisticLock">乐观锁</param>
    /// <param name="trans">事务对象</param>
    /// <returns></returns>
    public override bool Approve(object key, object optimisticLock = null, DbTransaction trans = null)
    {
        CheckDAL();
        ${Name} info = FindById(key);

        if (info == null || info.CreatedBy.IsNullOrEmpty())
            throw new Exception("数据异常，实体或创建时间为空！");

        if(optimisticLock != null && info.LastUpdateDate != (DateTime)optimisticLock)
            throw new Exception("数据已被其他用户修改，请刷新后重试");

        var hashTable = new Hashtable()
        {
            { ${Name}.FieldFlagApp, info.FlagApp.ObjToBool() ? 0 : 1 },
            { ${Name}.FieldAppUser, LoginUserInfo.ID },
            { ${Name}.FieldAppDate, DateTime.Now},
            { ${Name}.FieldLastUpdatedBy, LoginUserInfo.ID },
            { ${Name}.FieldLastUpdateDate, DateTime.Now}
        };
        return UpdateFields(hashTable, key, optimisticLock);
    }

    /// <summary>
    /// 构造查询语句
    /// </summary>
    /// <param name="searchInfos">查询参数</param>
    /// <returns></returns>
    public override string GetConditionSql(NameValueCollection searchInfos)
    {
        var condition = new SearchCondition();
#foreach($ColumnInfo in ${MetadataImports})
#if($ColumnInfo.IsSearch || $ColumnInfo.IsAdvSearch)
#if($ColumnInfo.ControlType=="ComboBoxEdit")
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Equal);
#elseif($ColumnInfo.ControlType=="SearchLookUpEdit" || $ColumnInfo.ControlType=="LookUpEdit" || $ColumnInfo.ControlType=="TreeListLookUpEdit")
#if($ColumnInfo.CSharpFieldName.indexOf("AreaNo") != -1 || $ColumnInfo.CSharpFieldName.indexOf("AreaId") != -1)
        bool areaNoLength = !searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}].IsNullOrEmpty() && searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}].Length < 6;
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}],
            areaNoLength ? SqlOperator.LikeStartAt : SqlOperator.Equal);
#else
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Equal);
#end
#elseif($ColumnInfo.ControlType=="SpinEdit")
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Between);
#elseif($ColumnInfo.ControlType=="DateEdit")
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Between);
#elseif($ColumnInfo.ControlType=="ToggleSwitch")
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Equal);
#elseif($ColumnInfo.ControlType=="CheckEdit")
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Equal);
#else
        condition.AddCondition(${Name}.Field${ColumnInfo.CSharpFieldName}, searchInfos[${Name}.Field${ColumnInfo.CSharpFieldName}], SqlOperator.Like);
#end
#end
#end
        return condition.BuildConditionSql().Replace("Where", "");
    }
}